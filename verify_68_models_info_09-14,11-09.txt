data_set_size:37429
****************************epoch: 250
loss: 0.23989465389702772
progress: 100.00 lr: 0.000300diff info 
    diff max: 4.495770 min: 0.072644, mean: 2.194801 var: 0.591120
     same max: 2.578560 min: 0.000008, mean: 0.312957, same_var 0.053385loss: 0.239895
Epoch: 250
SiameseNetwork(
  (coding_model): VGGNet(
    (blocks): Sequential(
      (0): VGGBlock(
        (block): Sequential(
          (0): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(14, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): MaxPool1d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
        )
      )
      (1): VGGBlock(
        (block): Sequential(
          (0): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): MaxPool1d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
        )
      )
    )
    (out): AdaptiveAvgPool1d(output_size=2)
  )
  (out): Sequential(
    (0): Dropout(p=0.5)
    (1): LeakyReLU(negative_slope=0.01)
    (2): Linear(in_features=256, out_features=64, bias=True)
  )
)