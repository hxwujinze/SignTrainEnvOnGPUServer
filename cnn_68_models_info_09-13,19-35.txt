data_set_size:37429
accuracy of each sign:
sign 0, accuracy 1.000000 (54 / 54)
sign 1, accuracy 0.937500 (60 / 64)
sign 2, accuracy 0.947368 (36 / 38)
sign 3, accuracy 0.925000 (37 / 40)
sign 4, accuracy 0.945946 (35 / 37)
sign 5, accuracy 0.977273 (43 / 44)
sign 6, accuracy 0.967742 (60 / 62)
sign 7, accuracy 1.000000 (49 / 49)
sign 8, accuracy 0.972222 (35 / 36)
sign 9, accuracy 0.977778 (44 / 45)
sign 10, accuracy 1.000000 (35 / 35)
sign 11, accuracy 0.977778 (44 / 45)
sign 12, accuracy 0.981818 (54 / 55)
sign 13, accuracy 1.000000 (31 / 31)
sign 14, accuracy 1.000000 (42 / 42)
sign 15, accuracy 0.959184 (47 / 49)
sign 16, accuracy 1.000000 (44 / 44)
sign 17, accuracy 0.934783 (43 / 46)
sign 18, accuracy 1.000000 (31 / 31)
sign 19, accuracy 1.000000 (22 / 22)
sign 20, accuracy 0.961538 (25 / 26)
sign 21, accuracy 0.923077 (36 / 39)
sign 22, accuracy 0.977778 (44 / 45)
sign 23, accuracy 0.937500 (45 / 48)
sign 24, accuracy 1.000000 (47 / 47)
sign 25, accuracy 0.974026 (75 / 77)
sign 26, accuracy 1.000000 (54 / 54)
sign 27, accuracy 1.000000 (39 / 39)
sign 28, accuracy 0.968750 (31 / 32)
sign 29, accuracy 0.961538 (25 / 26)
sign 30, accuracy 1.000000 (30 / 30)
sign 31, accuracy 1.000000 (47 / 47)
sign 32, accuracy 0.960784 (49 / 51)
sign 34, accuracy 0.971014 (67 / 69)
sign 36, accuracy 1.000000 (54 / 54)
sign 37, accuracy 1.000000 (22 / 22)
sign 38, accuracy 1.000000 (38 / 38)
sign 40, accuracy 1.000000 (2 / 2)
sign 41, accuracy 1.000000 (38 / 38)
sign 42, accuracy 1.000000 (35 / 35)
sign 44, accuracy 1.000000 (38 / 38)
sign 45, accuracy 0.928571 (26 / 28)
sign 46, accuracy 0.958333 (23 / 24)
sign 49, accuracy 0.961538 (25 / 26)
sign 50, accuracy 0.968750 (31 / 32)
sign 51, accuracy 1.000000 (24 / 24)
sign 52, accuracy 1.000000 (37 / 37)
sign 53, accuracy 1.000000 (21 / 21)
sign 54, accuracy 0.894737 (17 / 19)
sign 55, accuracy 0.967742 (30 / 31)
sign 56, accuracy 1.000000 (33 / 33)
sign 57, accuracy 1.000000 (32 / 32)
sign 58, accuracy 1.000000 (42 / 42)
sign 59, accuracy 0.976744 (42 / 43)
sign 60, accuracy 1.000000 (56 / 56)
sign 61, accuracy 1.000000 (17 / 17)
sign 62, accuracy 1.000000 (30 / 30)
sign 63, accuracy 1.000000 (13 / 13)
sign 64, accuracy 0.966667 (29 / 30)
sign 65, accuracy 1.000000 (25 / 25)
sign 66, accuracy 0.977273 (43 / 44)
sign 67, accuracy 0.972973 (36 / 37)
sign 68, accuracy 1.000000 (19 / 19)
overall accuracy: 0.97865
loss: 0.121943
Epoch: 130
CNN(
  (convs): VGGNet(
    (blocks): Sequential(
      (0): VGGBlock(
        (block): Sequential(
          (0): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(14, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): MaxPool1d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
        )
      )
      (1): VGGBlock(
        (block): Sequential(
          (0): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (2): Sequential(
            (0): LeakyReLU(negative_slope=0.01)
            (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
            (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): MaxPool1d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
        )
      )
    )
    (out): AdaptiveAvgPool1d(output_size=2)
  )
  (out): Sequential(
    (0): Dropout(p=0.5)
    (1): LeakyReLU(negative_slope=0.01)
    (2): Linear(in_features=128, out_features=69, bias=True)
  )
)